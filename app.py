import streamlit as st
from datetime import date
from PIL import Image
from pandas import read_csv
import pandas as pd
import seaborn as sns
import scipy as sc
from matplotlib import pyplot as plt
from pandas.plotting import scatter_matrix

# --- Configuration de la page ---
st.set_page_config(page_title="Analyse des ventes Beans & Pods", layout="wide")

# --- Menu de navigation et sidebar ---
st.sidebar.title("üîç Navigation")
menu = st.sidebar.selectbox('S√©lectionner une option', ['Accueil', 'Aper√ßu des donn√©es', 'Visualisation','Recommandations'])

# --- Affichage du titre principal ---
st.markdown(
    """
    <div style='text-align:center'>
        <h1> Analyse des Ventes - Beans & Pods</h1>
        <p>Visualisation et exploration des ventes par canal, r√©gion et type de produit.</p>
    </div>
    """, unsafe_allow_html=True
)

# --- Chargement des donn√©es ---
try:
    # D√©finition du chemin du fichier
    fichier = 'data/BeansDataSet.csv'
    
    # Lecture du fichier CSV
    data = read_csv(fichier)

    # Affichage des 5 premi√®res lignes
    st.write("Chargement des donn√©es avec succes ! Voici un aper√ßu :")
    st.dataframe(data.head())

except FileNotFoundError:
    st.error("Le fichier est introuvable. Veuillez v√©rifier le chemin.")
    st.stop()
except Exception as e:
    st.error(f"Une erreur est survenue : {e}")
    st.stop()

# --- Page Accueil ---
if menu == 'Accueil':
    st.subheader("üè† Accueil")
    st.write("Bienvenue dans l'analyse des ventes Beans & Pods.")
    st.write("Explorez les ventes par canal, par r√©gion et par type de produit.")
    
    # Affichage des statistiques de base
    st.subheader("Statistiques g√©n√©rales")
    st.write(data.describe())

    st.subheader("üìà Nombre de ventes par canal")
    figure, ax = plt.subplots()
    data['Channel'].value_counts().plot(kind='bar', color=['green', 'orange'], ax=ax)
    ax.set_xlabel('Canal')
    ax.set_ylabel('Nombre de ventes')
    st.pyplot(figure)

# --- Page Aper√ßu des donn√©es ---
elif menu == 'Aper√ßu des donn√©es':
    st.subheader(" Aper√ßu des donn√©es")
    
    # Affichage des 10 premi√®res lignes
    st.write("Les 10 premi√®res lignes du dataset :")
    st.dataframe(data.head(10))
    
    # Nombre de ventes par r√©gion
    st.subheader("üåç R√©partition des ventes par r√©gion")
    region_count = data['Region'].value_counts()
    st.write(region_count)

    # Graphique des ventes par r√©gion
    st.subheader(" Graphique des ventes par r√©gion")
    figure, ax = plt.subplots()
    region_count.plot(kind='bar', color=['blue', 'red', 'green'], ax=ax)
    ax.set_xlabel('Region')
    ax.set_ylabel('Nombre de ventes')
    st.pyplot(figure)

    # Statistiques descriptives
    st.subheader("Statistiques descriptives")
    st.write(data.describe())

    # Matrice de corr√©lation
    st.subheader("Matrice de corr√©lation")
    # Filtrer uniquement les colonnes num√©riques
    numerical_data = data.select_dtypes(include=['float64', 'int64'])

    # Affichage de la corr√©lation uniquement sur les colonnes num√©riques
    st.write(numerical_data.corr())

    
    # --- Section Visualisation ---
elif menu == 'Visualisation':
    st.markdown("<h2 style='text-align: center;'> Visualisation des ventes</h2>", unsafe_allow_html=True)

    # Histogramme des ventes par canal
    st.subheader('Ventes par canal (Store vs Online)')
    fig, ax = plt.subplots()
    data['Channel'].value_counts().plot(kind='bar', color=['blue', 'orange'], ax=ax)
    ax.set_xlabel('Canal')
    ax.set_ylabel('Nombre de ventes')
    st.pyplot(fig)

    # Ventes par r√©gion
    st.subheader('R√©partition des ventes par r√©gion')
    fig, ax = plt.subplots()
    data['Region'].value_counts().plot(kind='bar', color='green', ax=ax)
    ax.set_xlabel('Region')
    ax.set_ylabel('Nombre de ventes')
    st.pyplot(fig)

    # Matrice de corr√©lation
    st.subheader('Matrice de corr√©lation')
    numerical_data = data.select_dtypes(include=['float64', 'int64'])
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(numerical_data.corr(), cmap='coolwarm', annot=True, fmt='.2f', ax=ax)
    st.pyplot(fig)

# --- Section Recommandations ---
elif menu == 'Recommandations':
    st.markdown("<h2 style='text-align: center;'>Recommandations Marketing</h2>", unsafe_allow_html=True)

    # ‚úÖ Pr√©sentation des recommandations
    st.subheader(" **1Ô∏è‚É£ Augmenter la pr√©sence en ligne**")
    st.write("""
    -  **Investir dans la publicit√© cibl√©e sur les r√©seaux sociaux** pour booster les ventes en ligne.
    - **Offrir la livraison gratuite** pour les commandes sup√©rieures √† un certain montant afin d'augmenter le panier moyen.
    - *Proposer des promotions exclusives* sur le site web pour attirer davantage de clients.
    """)

    st.subheader("üåç **2Ô∏è‚É£ Renforcer la pr√©sence dans la r√©gion Sud**")
    st.write("""
    - **Lancer des promotions r√©gionales sp√©cifiques** pour attirer de nouveaux clients.
    - **Proposer des partenariats avec des caf√©s locaux** pour renforcer la notori√©t√© de la marque.
    - **Envoyer des campagnes d‚Äôemailing cibl√©es** pour booster la notori√©t√© dans la r√©gion Sud.
    """)

    st.subheader(" **3Ô∏è‚É£ Capitaliser sur les capsules Espresso et Lungo**")
    st.write("""
    - **Cr√©er des packs promotionnels** (ex. : 5 bo√Ætes + 1 gratuite) pour encourager les ventes en volume.
    - **Mettre en avant ces produits** sur le site web avec des recommandations personnalis√©es.
    - **Proposer des abonnements capsules** pour fid√©liser la client√®le.
    """)

    st.subheader(" **4Ô∏è‚É£ Relancer les ventes de Latt√© et Cappuccino**")
    st.write("""
    - **Offrir des d√©gustations gratuites** en magasin pour faire d√©couvrir ces capsules.
    - **Proposer des capsules gratuites** Latt√© et Cappuccino lors d‚Äôachats en ligne pour booster leur popularit√©.
    -  **Cr√©er des recettes et tutoriels vid√©o** sur les r√©seaux sociaux pour inspirer les clients.
    """)

    st.subheader("**5Ô∏è‚É£ Am√©liorer la collecte des donn√©es**")
    st.write("""
    - **Ajouter des champs d'informations clients** (√¢ge, genre, pr√©f√©rences) pour affiner le ciblage marketing.
    - **Suivre les pr√©f√©rences d‚Äôachat par r√©gion et par produit** pour mieux segmenter les clients.
    -  **Analyser les avis clients** pour identifier les am√©liorations possibles.
    """)

    # ‚úÖ Objectifs finaux
    st.markdown("""
    <div style='text-align: center;'>
        <h3>Objectif final : Augmenter les ventes, fid√©liser la client√®le et maximiser la rentabilit√©.</h3>
    </div>
    """, unsafe_allow_html=True)

# --- Page Visualisation ---

else:
    st.subheader(" Visualisations avanc√©es")

    # Histogrammes
    st.subheader(" Histogrammes")
    data.hist(bins=20, figsize=(15, 10))
    st.pyplot(plt.gcf())

    # Histogramme sp√©cifique : Ventes d'Espresso
    st.subheader("Histogramme des ventes d'Espresso")
    figure, ax = plt.subplots()
    ax.hist(data['Espresso'], color='purple')
    ax.set_xlabel('Quantit√© vendue')
    ax.set_ylabel('Fr√©quence')
    st.pyplot(figure)

    # Graphe de densit√©
    st.subheader("Graphe de densit√©")
    data.plot(kind='density', subplots=True, layout=(3, 3), sharex=False, sharey=False, figsize=(15, 10))
    st.pyplot(plt.gcf())

    # Bo√Æte √† moustaches
    st.subheader("Bo√Æte √† moustaches")
    data.plot(kind='box', subplots=True, layout=(3, 3), sharex=False, sharey=False, figsize=(15, 10))
    st.pyplot(plt.gcf())

    # Matrice de corr√©lation avec Seaborn
    st.subheader("Matrice de corr√©lation")
    figure, ax = plt.subplots(figsize=(10, 10))
    sns.heatmap(data.corr(), cmap='coolwarm', fmt='.2f', annot=True, ax=ax)
    st.pyplot(figure)

    # Scatter Matrix
    st.subheader("Scatter Matrix")
    scatter_matrix(data, figsize=(15, 10), diagonal='kde', color='green')
    st.pyplot(plt.gcf())

    # Pairplot avec Seaborn
    st.subheader("Graphique Pairplot")
    sns.pairplot(data, hue='Channel', palette='husl')
    st.pyplot(plt.gcf())



st.markdown("---")
st.write("**Projet r√©alis√© par FOGHA TADJOU AISSA REINE - Hiver 2025**")
